// üü¢ Day 2 ‚Äì Constants & Types
// 1Ô∏è‚É£ var Recap

// When you use var, Dart infers the type (decides automatically).

void main() {
  var name = "Venkat";  // String
  var age = 23;         // int
  // name = 100; ‚ùå error, because it's already String
}

// 2Ô∏è‚É£ final ‚Äì Runtime Constant

// Value is set once but at runtime.

// Cannot be changed later.

void main() {
  final city = "Hyderabad";  
  print(city);

  // city = "Chennai"; ‚ùå Error: final variable can‚Äôt be reassigned
}

// 3Ô∏è‚É£ const ‚Äì Compile-time Constant

// Value must be known at compile-time.

// Faster than final.

void main() {
  const pi = 3.14159;
  print(pi);

  // const now = DateTime.now(); ‚ùå Not allowed (runtime value)
  final now = DateTime.now();   // ‚úÖ Allowed
}

// 4Ô∏è‚É£ Difference Between final and const

// | Feature      | `final`                       | `const`            |
// | ------------ | ----------------------------- | ------------------ |
// | Value set at | Runtime                       | Compile-time       |
// | Example      | `final now = DateTime.now();` | `const pi = 3.14;` |
// | Reassignment | ‚ùå Not allowed                 | ‚ùå Not allowed      |

// 5Ô∏è‚É£ dynamic ‚Äì Flexible Type

// Can hold any type of value.

// Type can change during program execution.

void main() {
  dynamic value = "Hello";  
  print(value);   // String

  value = 100;    
  print(value);   // int

  value = true;   
  print(value);   // bool
}

// ‚ö†Ô∏è Use dynamic only when necessary, because it makes code less safe.

// 6Ô∏è‚É£ Type Inference (var vs dynamic)

// var ‚Üí fixed type once assigned.

// dynamic ‚Üí type can change.

void main() {
  var x = "Dart";  
  // x = 100; ‚ùå Error

  dynamic y = "Flutter";  
  y = 100;  // ‚úÖ Allowed
}
